# =============================================================================
# ZAMC Platform Helm Values
# =============================================================================

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  
# =============================================================================
# Application Configuration
# =============================================================================

# ZAMC Web Frontend - Optimized for analytics workloads
web:
  enabled: true
  replicaCount: 3
  image:
    repository: zamc/web
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    hosts:
      - host: zamc.local
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: zamc-web-tls
        hosts:
          - zamc.local
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 15
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  env:
    NODE_ENV: production
    VITE_API_URL: http://zamc-bff:4000/graphql
    VITE_ENABLE_ANALYTICS: "true"
    VITE_CAMPAIGN_PERFORMANCE_WS: "ws://zamc-bff:4000/graphql"
    VITE_REAL_TIME_UPDATES: "true"

# ZAMC BFF GraphQL API - Enhanced for real-time subscriptions
bff:
  enabled: true
  replicaCount: 3
  image:
    repository: zamc/bff
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 4000
    targetPort: 4000
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
      nginx.ingress.kubernetes.io/websocket-services: "zamc-bff"
      nginx.ingress.kubernetes.io/proxy-set-headers: "zamc/websocket-headers"
    hosts:
      - host: api.zamc.local
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: zamc-bff-tls
        hosts:
          - api.zamc.local
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 1000m
      memory: 1Gi
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 12
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  env:
    PORT: "4000"
    LOG_LEVEL: info
    ENVIRONMENT: production
    GRAPHQL_PLAYGROUND: "false"
    GRAPHQL_INTROSPECTION: "false"

# ZAMC Orchestrator Service - Enhanced AI/ML capabilities
orchestrator:
  enabled: true
  replicaCount: 2
  image:
    repository: zamc/orchestrator
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8001
    targetPort: 8001
  resources:
    limits:
      cpu: 4000m
      memory: 4Gi
    requests:
      cpu: 2000m
      memory: 2Gi
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 8
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 85
  env:
    PORT: "8001"
    LOG_LEVEL: info
    ENVIRONMENT: production
    MAX_CONCURRENT_STRATEGIES: "10"
    STRATEGY_TIMEOUT: "600"
    CONTENT_GENERATION_TIMEOUT: "180"

# ZAMC Connectors Service - Enhanced platform integrations
connectors:
  enabled: true
  replicaCount: 3
  image:
    repository: zamc/connectors
    tag: "1.0.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8002
    targetPort: 8002
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 1000m
      memory: 1Gi
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 12
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  env:
    PORT: "8002"
    LOG_LEVEL: info
    ENVIRONMENT: production
    MAX_RETRY_ATTEMPTS: "5"
    RETRY_DELAY_SECONDS: "10"
    DEPLOYMENT_TIMEOUT_SECONDS: "600"

# =============================================================================
# Infrastructure Dependencies
# =============================================================================

# PostgreSQL Database - Production-ready configuration with enhanced security
postgresql:
  enabled: true
  auth:
    postgresPassword: "CHANGE_ME_SECURE_POSTGRES_PASSWORD"
    username: "zamc"
    password: "CHANGE_ME_SECURE_ZAMC_PASSWORD"
    database: "zamc"
    # Enable password encryption
    enablePostgresUser: true
    postgresPasswordEncrypted: false
  primary:
    persistence:
      enabled: true
      size: 50Gi
      # Enable encryption at rest
      storageClass: "encrypted-ssd"
    resources:
      limits:
        cpu: 2000m
        memory: 4Gi
      requests:
        cpu: 1000m
        memory: 2Gi
    # Enhanced security configuration
    configuration: |
      # Connection and Authentication
      max_connections = 200
      ssl = on
      ssl_cert_file = '/opt/bitnami/postgresql/certs/tls.crt'
      ssl_key_file = '/opt/bitnami/postgresql/certs/tls.key'
      ssl_ca_file = '/opt/bitnami/postgresql/certs/ca.crt'
      ssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL'
      ssl_prefer_server_ciphers = on
      ssl_min_protocol_version = 'TLSv1.2'
      
      # Memory and Performance
      shared_buffers = 1GB
      effective_cache_size = 3GB
      maintenance_work_mem = 256MB
      checkpoint_completion_target = 0.9
      wal_buffers = 16MB
      default_statistics_target = 100
      random_page_cost = 1.1
      effective_io_concurrency = 200
      work_mem = 4MB
      min_wal_size = 1GB
      max_wal_size = 4GB
      
      # Security and Auditing
      log_statement = 'all'
      log_min_duration_statement = 0
      log_connections = on
      log_disconnections = on
      log_hostname = on
      log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      
      # Enable pg_audit extension for detailed auditing
      shared_preload_libraries = 'pg_audit'
      pg_audit.log = 'all'
      pg_audit.log_catalog = off
      pg_audit.log_parameter = on
      pg_audit.log_statement_once = on
      
      # WAL and Backup Security
      wal_level = replica
      archive_mode = on
      archive_command = 'test ! -f /backup/archive/%f && cp %p /backup/archive/%f'
      
      # Row Level Security
      row_security = on
      
      # Connection Security
      password_encryption = scram-sha-256
      
    # TLS/SSL Configuration
    tls:
      enabled: true
      certificatesSecret: "postgresql-tls"
      certFilename: "tls.crt"
      certKeyFilename: "tls.key"
      certCAFilename: "ca.crt"
    
    # Security Context
    securityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
      runAsNonRoot: true
    
    # Pod Security Context
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
          - ALL
    
    # Network Policies
    networkPolicy:
      enabled: true
      allowExternal: false
      ingressRules:
        - from:
            - podSelector:
                matchLabels:
                  app.kubernetes.io/name: zamc-bff
        - from:
            - podSelector:
                matchLabels:
                  app.kubernetes.io/name: zamc-orchestrator
    
    # Backup Configuration with Encryption
    backup:
      enabled: true
      schedule: "0 2 * * *"  # Daily at 2 AM
      encryption:
        enabled: true
        secretName: "backup-encryption-key"
      retention:
        days: 30
        weeks: 4
        months: 12
    
    # Monitoring and Health Checks
    livenessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 6
      successThreshold: 1
    
    readinessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 6
      successThreshold: 1
    
  # Read Replicas for Load Distribution
  readReplicas:
    replicaCount: 2
    persistence:
      enabled: true
      size: 50Gi
      storageClass: "encrypted-ssd"
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    
  # Metrics and Monitoring
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
    prometheusRule:
      enabled: true
      rules:
        - alert: PostgreSQLDown
          expr: pg_up == 0
          for: 0m
          labels:
            severity: critical
          annotations:
            summary: PostgreSQL instance is down
        - alert: PostgreSQLHighConnections
          expr: pg_stat_database_numbackends / pg_settings_max_connections > 0.8
          for: 2m
          labels:
            severity: warning
          annotations:
            summary: PostgreSQL high connection usage
        - alert: PostgreSQLSlowQueries
          expr: pg_stat_activity_max_tx_duration > 300
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: PostgreSQL slow queries detected
  
  # Audit Configuration
  audit:
    enabled: true
    logLevel: "INFO"
    logDestination: "syslog"
    logConnections: true
    logDisconnections: true
    logStatements: "all"
    logDuration: true

# Redis Cache - High-performance configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: "CHANGE_ME_SECURE_REDIS_PASSWORD"
  master:
    persistence:
      enabled: true
      size: 10Gi
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      size: 10Gi
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# NATS Message Queue - Optimized for real-time messaging
nats:
  enabled: true
  nats:
    image: nats:2.10-alpine
    jetstream:
      enabled: true
      memStorage:
        enabled: true
        size: 2Gi
      fileStorage:
        enabled: true
        size: 10Gi
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
  cluster:
    enabled: true
    replicas: 3
  natsbox:
    enabled: true

# Qdrant Vector Database - For AI/ML embeddings
qdrant:
  enabled: true
  image:
    repository: qdrant/qdrant
    tag: "v1.7.0"
  persistence:
    enabled: true
    size: 20Gi
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi

# =============================================================================
# Security Configuration - CRITICAL: All secrets must be externally managed
# =============================================================================

secrets:
  # Database secrets
  database:
    url: "postgresql://zamc:zamc-password@zamc-postgresql:5432/zamc"
  
  # Redis secrets
  redis:
    url: "redis://:zamc-redis-password@zamc-redis-master:6379"
  
  # NATS secrets
  nats:
    url: "nats://zamc-nats:4222"
  
  # JWT secrets - SECURITY: MUST be set to a cryptographically secure value
  jwt:
    secret: "REQUIRED_SECURE_JWT_SECRET_MINIMUM_256_BITS"
  
  # AI API keys (set these in your values override file)
  ai:
    openaiApiKey: ""
    anthropicApiKey: ""
    huggingfaceApiKey: ""
  
  # Ad platform credentials (set these in your values override file)
  googleAds:
    developerToken: ""
    clientId: ""
    clientSecret: ""
    refreshToken: ""
    customerId: ""
    loginCustomerId: ""
  
  meta:
    appId: ""
    appSecret: ""
    accessToken: ""
    adAccountId: ""
    apiVersion: "v18.0"

# =============================================================================
# Monitoring and Observability
# =============================================================================

# Prometheus monitoring
monitoring:
  enabled: true
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      scrapeTimeout: 10s
  grafana:
    enabled: true
    adminPassword: "admin"
    persistence:
      enabled: true
      size: 5Gi
  jaeger:
    enabled: true

# =============================================================================
# Ingress Configuration
# =============================================================================

# Global ingress settings
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  tls:
    enabled: true
    secretName: "zamc-tls"

# =============================================================================
# Security Configuration
# =============================================================================

# Pod Security Standards
podSecurityPolicy:
  enabled: true

# Security Context for all pods
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

# Network Policies
networkPolicy:
  enabled: true
  ingress:
    enabled: true
  egress:
    enabled: true

# Service Mesh (if using Istio)
serviceMesh:
  enabled: false
  istio:
    enabled: false

# =============================================================================
# Storage Configuration
# =============================================================================

# Persistent Volume Claims
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi

# =============================================================================
# Service Account and RBAC
# =============================================================================

serviceAccount:
  create: true
  annotations: {}
  name: ""

rbac:
  create: true

# =============================================================================
# Node Selection and Tolerations
# =============================================================================

nodeSelector: {}

tolerations: []

affinity: {}

# =============================================================================
# Development and Testing
# =============================================================================

# Development tools (disabled in production)
devTools:
  enabled: false
  pgAdmin:
    enabled: false
  redisCommander:
    enabled: false 