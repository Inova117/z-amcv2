# Build stage
FROM node:18-alpine AS builder

# Install security updates and dependencies for building
RUN apk update && apk upgrade --no-cache && \
    apk add --no-cache git dumb-init

# Create app user for security with consistent UID/GID
RUN addgroup -g 1001 -S nodejs && \
    adduser -S -u 1001 -G nodejs nodejs

# Set working directory
WORKDIR /app

# Copy package files with proper ownership
COPY --chown=nodejs:nodejs package*.json ./
COPY --chown=nodejs:nodejs bun.lockb ./

# Switch to non-root user for dependency installation
USER nodejs

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code with proper ownership
COPY --chown=nodejs:nodejs . .

# Build the application
RUN npm run build

# Production stage - using distroless nginx
FROM nginx:alpine

# Install security updates and create proper user
RUN apk update && apk upgrade --no-cache && \
    apk add --no-cache dumb-init && \
    addgroup -g 1001 -S nginx && \
    adduser -S -u 1001 -G nginx nginx

# Remove default nginx config and create secure configuration
RUN rm /etc/nginx/conf.d/default.conf && \
    rm -rf /var/log/nginx && \
    mkdir -p /var/log/nginx /var/cache/nginx /tmp/nginx && \
    touch /var/log/nginx/access.log /var/log/nginx/error.log

# Copy custom nginx configuration
COPY infra/compose/configs/nginx.conf /etc/nginx/nginx.conf

# Copy built application with proper ownership
COPY --from=builder --chown=nginx:nginx /app/dist /usr/share/nginx/html

# Set proper permissions and create read-only directories
RUN chown -R nginx:nginx /var/cache/nginx /var/log/nginx /tmp/nginx /usr/share/nginx/html && \
    chmod -R 755 /var/cache/nginx /var/log/nginx /tmp/nginx && \
    chmod -R 644 /usr/share/nginx/html

# Configure nginx to run on non-privileged port
RUN sed -i 's/listen 80;/listen 8080;/' /etc/nginx/nginx.conf && \
    sed -i 's/listen \[::\]:80;/listen [::]:8080;/' /etc/nginx/nginx.conf && \
    sed -i 's/user nginx;/user nginx;/' /etc/nginx/nginx.conf

# Switch to non-root user
USER nginx

# Expose non-privileged port
EXPOSE 8080

# Health check with proper timeout
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start nginx in foreground
CMD ["nginx", "-g", "daemon off;"] 