# Build stage
FROM python:3.11-slim AS builder

# Install security updates and build dependencies
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libc6-dev \
    pkg-config \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create app user with consistent UID/GID
RUN groupadd -g 1001 appgroup && \
    useradd -r -u 1001 -g appgroup -s /bin/sh appuser

# Set working directory
WORKDIR /app

# Copy requirements with proper ownership
COPY --chown=appuser:appgroup requirements.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy application code with proper ownership
COPY --chown=appuser:appgroup . .

# Build wheel for faster installation
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements.txt

# Production stage - using distroless Python
FROM gcr.io/distroless/python3-debian11:nonroot

# Copy Python dependencies from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application with proper ownership
COPY --from=builder --chown=nonroot:nonroot /app /app

# Set working directory
WORKDIR /app

# Use non-root user from distroless
USER nonroot

# Set Python path
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Expose port
EXPOSE 8001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD ["python", "-c", "import requests; requests.get('http://localhost:8001/health', timeout=5)"]

# Run the application
CMD ["python", "-m", "orchestrator.main"] 