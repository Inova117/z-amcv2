// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type BoardUpdate interface {
	IsBoardUpdate()
}

type Asset struct {
	ID         string      `json:"id"`
	Name       string      `json:"name"`
	Type       AssetType   `json:"type"`
	URL        *string     `json:"url,omitempty"`
	Status     AssetStatus `json:"status"`
	BoardID    string      `json:"boardId"`
	Board      *Board      `json:"board"`
	ApprovedBy *User       `json:"approvedBy,omitempty"`
	ApprovedAt *time.Time  `json:"approvedAt,omitempty"`
	CreatedAt  time.Time   `json:"createdAt"`
	UpdatedAt  time.Time   `json:"updatedAt"`
}

func (Asset) IsBoardUpdate() {}

type Board struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description,omitempty"`
	ProjectID   string    `json:"projectId"`
	Project     *Project  `json:"project"`
	Assets      []*Asset  `json:"assets"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type ChatMessage struct {
	ID        string    `json:"id"`
	Content   string    `json:"content"`
	UserID    string    `json:"userId"`
	User      *User     `json:"user"`
	BoardID   string    `json:"boardId"`
	Board     *Board    `json:"board"`
	CreatedAt time.Time `json:"createdAt"`
}

func (ChatMessage) IsBoardUpdate() {}

type CreateBoardInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	ProjectID   string  `json:"projectId"`
}

type CreateProjectInput struct {
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
}

type Mutation struct {
}

type Project struct {
	ID          string        `json:"id"`
	Name        string        `json:"name"`
	Description *string       `json:"description,omitempty"`
	Status      ProjectStatus `json:"status"`
	OwnerID     string        `json:"ownerId"`
	Owner       *User         `json:"owner"`
	Boards      []*Board      `json:"boards"`
	CreatedAt   time.Time     `json:"createdAt"`
	UpdatedAt   time.Time     `json:"updatedAt"`
}

type Query struct {
}

type Subscription struct {
}

type UploadAssetInput struct {
	Name    string    `json:"name"`
	Type    AssetType `json:"type"`
	URL     string    `json:"url"`
	BoardID string    `json:"boardId"`
}

type User struct {
	ID        string    `json:"id"`
	Email     string    `json:"email"`
	Name      *string   `json:"name,omitempty"`
	Avatar    *string   `json:"avatar,omitempty"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type AssetStatus string

const (
	AssetStatusPending          AssetStatus = "PENDING"
	AssetStatusApproved         AssetStatus = "APPROVED"
	AssetStatusRejected         AssetStatus = "REJECTED"
	AssetStatusRevisionRequired AssetStatus = "REVISION_REQUIRED"
)

var AllAssetStatus = []AssetStatus{
	AssetStatusPending,
	AssetStatusApproved,
	AssetStatusRejected,
	AssetStatusRevisionRequired,
}

func (e AssetStatus) IsValid() bool {
	switch e {
	case AssetStatusPending, AssetStatusApproved, AssetStatusRejected, AssetStatusRevisionRequired:
		return true
	}
	return false
}

func (e AssetStatus) String() string {
	return string(e)
}

func (e *AssetStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AssetStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AssetStatus", str)
	}
	return nil
}

func (e AssetStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AssetType string

const (
	AssetTypeImage    AssetType = "IMAGE"
	AssetTypeVideo    AssetType = "VIDEO"
	AssetTypeDocument AssetType = "DOCUMENT"
	AssetTypeAudio    AssetType = "AUDIO"
	AssetTypeOther    AssetType = "OTHER"
)

var AllAssetType = []AssetType{
	AssetTypeImage,
	AssetTypeVideo,
	AssetTypeDocument,
	AssetTypeAudio,
	AssetTypeOther,
}

func (e AssetType) IsValid() bool {
	switch e {
	case AssetTypeImage, AssetTypeVideo, AssetTypeDocument, AssetTypeAudio, AssetTypeOther:
		return true
	}
	return false
}

func (e AssetType) String() string {
	return string(e)
}

func (e *AssetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AssetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AssetType", str)
	}
	return nil
}

func (e AssetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProjectStatus string

const (
	ProjectStatusActive   ProjectStatus = "ACTIVE"
	ProjectStatusArchived ProjectStatus = "ARCHIVED"
	ProjectStatusDraft    ProjectStatus = "DRAFT"
)

var AllProjectStatus = []ProjectStatus{
	ProjectStatusActive,
	ProjectStatusArchived,
	ProjectStatusDraft,
}

func (e ProjectStatus) IsValid() bool {
	switch e {
	case ProjectStatusActive, ProjectStatusArchived, ProjectStatusDraft:
		return true
	}
	return false
}

func (e ProjectStatus) String() string {
	return string(e)
}

func (e *ProjectStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProjectStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProjectStatus", str)
	}
	return nil
}

func (e ProjectStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
